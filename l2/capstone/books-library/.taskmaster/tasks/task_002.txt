# Task ID: 2
# Title: Implement User Authentication and Role-Based Access
# Status: in-progress
# Dependencies: 1
# Priority: high
# Description: Build the complete user authentication flow including registration, login, email verification, and role-based route protection.
# Details:
Create sign-up and login pages with forms. Use Supabase Auth for user management and JWT-based sessions. Integrate Resend to send verification emails upon registration. Implement middleware to protect admin routes, allowing access only to users with the 'ADMIN' role.

# Test Strategy:
Test the user registration flow, including receiving the verification email. Test login with valid and invalid credentials. Attempt to access an admin route as a regular user and verify access is denied. Confirm admins can access protected routes.

# Subtasks:
## 1. Implement Sign-up and Login UI with Server Actions [done]
### Dependencies: None
### Description: Create the user interface for the sign-up and login pages using the existing Shadcn UI components. Implement server actions to handle form submissions for both registration and authentication using the Supabase client.
### Details:
In `app/signup/page.tsx`, build a form with fields for email, password, and confirm password. Implement client-side validation using Zod schema to ensure email format is valid, password meets minimum requirements (e.g., 8+ characters), and confirm password matches the password field. Create a server action that uses the Supabase server client to call `supabase.auth.signUp`. In `app/login/page.tsx`, build a form with email and password fields, also with Zod validation for email format and required fields. Create a server action that calls `supabase.auth.signInWithPassword`. Ensure proper error handling and user feedback for both forms, displaying validation errors inline and server errors via toast notifications.

## 2. Set Up Database Trigger for User Role Management [done]
### Dependencies: None
### Description: Implement a database trigger to automatically populate the `users` table with role and approval status when a new user registers.
### Details:
Using the Supabase SQL Editor, create a PostgreSQL function and a trigger that fires on `INSERT` into the `auth.users` table to populate the `users` table with the corresponding user data including `role` (default 'USER') and `approval_status` (default 'PENDING'). This ensures that every new user automatically gets the proper role and approval status.

## 3. Configure Supabase Default Email Verification [done]
### Dependencies: 2.1
### Description: Configure Supabase to use its default email verification system for user registration. No custom email integration needed for verification.
### Details:
Ensure Supabase Auth is configured to send verification emails using a template. Users will receive a custom template Supabase verification emails when they register. No custom Resend integration is needed for this step.

## 4. Implement Role-Based Access Control in Middleware [done]
### Dependencies: 2.1, 2.2
### Description: Modify the existing `middleware.ts` file to protect all routes under the `/admin` path, allowing access only to users with the 'ADMIN' role.
### Details:
In `middleware.ts`, after the session is retrieved, check if the request path starts with `/admin`. If it does, use the Supabase client to query the `users` table for the current user's role. If the user's role is not 'ADMIN', redirect them to the homepage. If there is no user session, redirect them to the login page. Ensure the middleware correctly handles fetching the user data associated with the session.

## 5. Create a Server-Side Utility to Fetch Current User with Role [done]
### Dependencies: 2.2
### Description: Develop a reusable server-side helper function to retrieve the currently authenticated user's session and their corresponding user data, including their role and approval status.
### Details:
In the `lib` directory, create a new file (e.g., `lib/auth.ts`). Define an async function, `getUserWithRole`, that creates a Supabase server client, gets the current user from `supabase.auth.getUser()`, and if a user exists, queries the `users` table for their full user data including role and approval status. This function will encapsulate the logic of joining `auth.users` with `users` and can be used in the middleware and other server components/actions.

## 6. Implement Navigation Component with Authentication Actions [done]
### Dependencies: 2.5
### Description: Create a reusable navigation component that displays different links based on user authentication status and role, including logout functionality.
### Details:
Create a `components/navigation.tsx` component that uses `getUserWithRole()` to fetch user data. Display conditional navigation links: Home, Admin (for ADMIN users only), Login/Signup (for unauthenticated users), and Logout (for authenticated users). Implement logout functionality using a server action `logoutUser()` that calls `supabase.auth.signOut()` and redirects to home. Update the root layout to include the navigation component.

