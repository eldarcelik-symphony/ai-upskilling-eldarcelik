# Task ID: 4
# Title: Develop Public Book Catalog and Detail Pages
# Status: To Do
# Dependencies: 3
# Priority: medium
# Description: Create the public-facing pages for users to browse the book catalog and view individual book details.
# Details:
Build a main catalog page that lists all books, including their cover image, title, and author. Implement server-side search (by title/author) and pagination. Create a dynamic route `/[bookId]` to display a detailed page for each book.

# Test Strategy:
Verify the catalog page loads and displays books from the database. Test the search and pagination to ensure they function correctly. Navigate to a book detail page and confirm all information is displayed accurately.

# Subtasks:
## 1. Create Book Catalog Page with Initial Data Fetching [done]
### Dependencies: None
### Description: Set up the main public-facing book catalog page at the `/catalog` route. This page will be a server component that fetches and displays a grid of all available books from the database.
### Details:
Create a new route directory `app/catalog/`. Inside, create a `page.tsx` file. This file will be a server component that uses a server-side Supabase client to fetch all records from the `books` table. Use Shadcn UI components like `<Card>` and `<CardContent>` to create a responsive grid layout, displaying each book's cover image, title, author, and category.

## 2. Implement Infinite Scroll with Search and Filtering [done]
### Dependencies: 4.1
### Description: Add infinite scroll functionality with search by title/author, category filtering, and availability filtering.
### Details:
Create a client component `CatalogClient.tsx` with infinite scroll using Intersection Observer. Add search input for title/author filtering, category dropdown filter, and availability filter (all/available/unavailable). Update `getActiveBooks()` function to support pagination, search, and filtering parameters. Create API route `/api/catalog` to handle client-side requests. Implement smooth loading states and end-of-catalog indicators.

## 3. Create Dynamic Route for Book Detail Page [pending]
### Dependencies: None
### Description: Develop the individual book detail page using a dynamic route. This page will display comprehensive information about a single selected book.
### Details:
Create a new dynamic route `app/catalog/[id]/page.tsx`. This server component will receive the book `id` via its `params` prop. Create a new data-fetching function, `getBookById(id)`, to retrieve a single book's complete data from Supabase. Design a two-column layout to display the book's cover image on one side and its title, author, description, and other details on the other.

## 4. Link Catalog Items and Handle 'Not Found' State [pending]
### Dependencies: 4.1, 4.5
### Description: Connect the catalog page to the detail page by making each book card a link. Also, implement a robust 'not found' state for the detail page if a book with the given ID does not exist.
### Details:
In `app/catalog/page.tsx`, wrap each book card component in a Next.js `<Link>` component that navigates to `/catalog/${book.id}`. In `app/catalog/[id]/page.tsx`, check if the data returned from `getBookById(id)` is null or empty. If so, call the `notFound()` function from `next/navigation` to render the standard 404 page.

