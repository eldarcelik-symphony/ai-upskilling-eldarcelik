# Task ID: 4
# Title: Develop Public Book Catalog and Detail Pages
# Status: To Do
# Dependencies: 3
# Priority: medium
# Description: Create the public-facing pages for users to browse the book catalog and view individual book details.
# Details:
Build a main catalog page that lists all books, including their cover image, title, and author. Implement server-side search (by title/author) and pagination. Create a dynamic route `/[bookId]` to display a detailed page for each book.

# Test Strategy:
Verify the catalog page loads and displays books from the database. Test the search and pagination to ensure they function correctly. Navigate to a book detail page and confirm all information is displayed accurately.

# Subtasks:
## 1. Create Book Catalog Page with Initial Data Fetching [pending]
### Dependencies: None
### Description: Set up the main public-facing book catalog page at the `/books` route. This page will be a server component that fetches and displays a grid of all available books from the database.
### Details:
Create a new route directory `app/books/`. Inside, create a `page.tsx` file. This file will be a server component that uses a server-side Supabase client to fetch all records from the `books` table where `is_active = true`. Use Shadcn UI components like `<Card>` and `<CardContent>` to create a responsive grid layout, displaying each book's cover image, title, author, and category.

## 2. Implement Server-Side Search Functionality [pending]
### Dependencies: 4.1
### Description: Add a search bar to the catalog page to allow users to filter books by title or author. The search logic will be executed on the server, and the search query will be stored in the URL search parameters.
### Details:
In `app/books/page.tsx`, add a search form with an `<Input>` component. The page component should read the search query from its `searchParams` prop. Create or update a data-fetching function (e.g., in `lib/data.ts`) to modify the Supabase query, using `.or('title.ilike.%query%,author.ilike.%query%,category.ilike.%query%')` to filter the results based on the provided query. Also add a category filter dropdown.

## 3. Implement Server-Side Pagination [pending]
### Dependencies: 4.1
### Description: Add pagination controls to the bottom of the catalog page to handle large numbers of books. The current page number will be managed via URL search parameters.
### Details:
Update the data-fetching function to accept `page` and `limit` arguments and use Supabase's `.range()` method for pagination. Perform a second query to get the total count of books for calculating the total number of pages. Use the Shadcn `<Pagination>` component in `app/books/page.tsx`, passing it the necessary props. The pagination links should update the `page` parameter in the URL.

## 4. Implement Server-Side Sorting [pending]
### Dependencies: 4.1
### Description: Add sorting functionality to the catalog page allowing users to sort books by title, author, category, or publication date. The sorting will be handled server-side and reflected in URL parameters.
### Details:
Update the data-fetching function to accept `sortField` and `sortDirection` parameters. Use Supabase's `.order()` method to sort by the specified field and direction. Add a sorting dropdown or clickable column headers to the catalog page UI. Update URL search parameters when sorting options change. Support sorting by title, author, category, and available copies.

## 5. Create Dynamic Route for Book Detail Page [pending]
### Dependencies: None
### Description: Develop the individual book detail page using a dynamic route. This page will display comprehensive information about a single selected book.
### Details:
Create a new dynamic route `app/books/[id]/page.tsx`. This server component will receive the book `id` via its `params` prop. Create a new data-fetching function, `getBookById(id)`, to retrieve a single book's complete data from Supabase. Design a two-column layout to display the book's cover image on one side and its title, author, description, and other details on the other.

## 6. Link Catalog Items and Handle 'Not Found' State [pending]
### Dependencies: 4.1, 4.5
### Description: Connect the catalog page to the detail page by making each book card a link. Also, implement a robust 'not found' state for the detail page if a book with the given ID does not exist.
### Details:
In `app/books/page.tsx`, wrap each book card component in a Next.js `<Link>` component that navigates to `/books/${book.id}`. In `app/books/[id]/page.tsx`, check if the data returned from `getBookById(id)` is null or empty. If so, call the `notFound()` function from `next/navigation` to render the standard 404 page.

